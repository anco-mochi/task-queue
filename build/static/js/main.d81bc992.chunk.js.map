{"version":3,"sources":["serviceWorker.ts","ts/lib/task_queue.ts","ts/lib/task.ts","ts/apps/task_list.tsx","ts/apps/task_form.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskQueue","limit","queue","this","task","length","pushed_queue","concat","push","poped_queue","reverse","pop","Task","description","TaskList","props","task_queue","map","index","className","TaskForm","state","taskQueue","setState","event","target","value","placeholder","onChange","e","onClick","popTask","pushTask","React","Component","ReactDOM","render","StrictMode","style","height","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCkBSC,EAlCf,WAII,WAAYC,GAAyC,IAA1BC,EAAyB,uDAAJ,GAAI,yBAHpDA,WAGoD,OAFpDD,WAEoD,EAChDE,KAAKD,MAAQA,EACbC,KAAKF,MAAQA,EANrB,iDASSG,GACD,GAAGD,KAAKD,MAAMG,QAAUF,KAAKF,MACzB,OAAOE,KAGX,IAAIG,EAAeH,KAAKD,MAAMK,SAE9B,OADAD,EAAaE,KAAKJ,GACX,IAAIJ,EAAUG,KAAKF,MAAOK,KAhBzC,4BAoBQ,IAAIG,EAA2BN,KAAKD,MAAMK,SAASG,UAEnD,OAAID,EAAYE,MAIT,IAAIX,EAAUG,KAAKF,MAAOQ,EAAYC,WAHlCP,OAvBnB,+BA8BQ,OAAOA,KAAKD,MAAMG,SAAWF,KAAKF,UA9B1C,KCMeW,EALX,WAAYC,GAAsB,yBAFlCA,iBAEiC,EAC7BV,KAAKU,YAAcA,GCgBZC,EAZmB,SAACC,GACjC,OACE,6BACGA,EAAMC,WAAWd,MAAMe,KAAI,SAACb,EAAYc,GAAb,OAC1B,yBAAKC,UAAU,wFACb,uBAAGA,UAAU,gDAAiDf,EAAKS,mBCoD9DO,E,kDArDb,WAAYL,GAAuB,IAAD,8BAC9B,cAAMA,IACDM,MAAQ,CAAEC,UAAW,IAAItB,EAAU,IAAKa,YAAa,IAF5B,E,uDAMhCV,KAAKoB,SAAS,CACZD,UAAWnB,KAAKkB,MAAMC,UAAUd,KAC5B,IAAII,EAAKT,KAAKkB,MAAMR,cAExBA,YAAa,O,gCAKfV,KAAKoB,SAAS,CACZD,UAAWnB,KAAKkB,MAAMC,UAAUX,U,+BAI3Ba,GACPrB,KAAKoB,SAAS,CACZV,YAAaW,EAAMC,OAAOC,U,+BAIpB,IAAD,OACP,OACE,6BACE,yBAAKP,UAAU,uCACb,8BACEA,UAAU,2FACVQ,YAAY,aACZD,MAAQvB,KAAKkB,MAAMR,YACnBe,SAAW,SAACC,GAAD,OAAO,EAAKD,SAASC,OAGpC,yBAAKV,UAAU,6DACb,4BACEA,UAAU,iFACVW,QAAS,WAAQ,EAAKC,YAFxB,OAGA,4BACEZ,UAAU,qFACVW,QAAS,WAAQ,EAAKE,aAFxB,SAIF,kBAAC,EAAD,CACEhB,WAAab,KAAKkB,MAAMC,iB,GA/CXW,IAAMC,WCA7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,0BAAMlB,UAAU,OACd,4BAAQA,UAAU,mCAChB,wBAAIA,UAAU,0CAAd,eAEF,yBAAKA,UAAU,sEAAsEmB,MAV7E,CACZC,OAAQ,yBAUF,kBAAC,EAAD,SAINC,SAASC,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d81bc992.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Task } from './task';\n\nexport class TaskQueue {\n    queue: Array<Task>;\n    limit: number;\n\n    constructor(limit: number, queue: Array<Task> = []) {\n        this.queue = queue;\n        this.limit = limit;\n    }\n\n    push(task: Task): TaskQueue {\n        if(this.queue.length >= this.limit) {\n            return this;\n        }\n\n        let pushed_queue = this.queue.concat();\n        pushed_queue.push(task);\n        return new TaskQueue(this.limit, pushed_queue);\n    }\n\n    pop(): TaskQueue {\n        let poped_queue: Array<Task> = this.queue.concat().reverse();\n\n        if(!poped_queue.pop()) {\n            return this;\n        }\n\n        return new TaskQueue(this.limit, poped_queue.reverse());\n    }\n\n    isFull(): Boolean {\n        return this.queue.length === this.limit;\n    }\n}\n\nexport default TaskQueue\n","export class Task {\n    description: string;\n\n    constructor(description: string) {\n        this.description = description;\n    }\n}\n\nexport default Task\n","import React from 'react'\nimport TaskQueue from '../lib/task_queue'\nimport Task from '../lib/task'\n\ntype Props = {\n  task_queue: TaskQueue;\n}\n\nconst TaskList: React.FC<Props> = (props) => {\n  return (\n    <div>\n      {props.task_queue.queue.map((task: Task, index: number) => (\n        <div className=\"inline-block box-border w-full h-auto bg-gray-100 px-4 py-2 border-b border-gray-400\">\n          <p className=\"inline-block text-gray-600 break-all text-lg\">{ task.description }</p>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default TaskList\n","import React, { ChangeEvent } from 'react'\nimport TaskQueue from '../lib/task_queue'\nimport Task from '../lib/task'\nimport TaskList from './task_list'\n\ntype TaskFormProps = {};\ntype TaskFormState = {\n  taskQueue: TaskQueue;\n  description: string;\n};\n\nclass TaskForm extends React.Component<TaskFormProps, TaskFormState> {\n  constructor(props: TaskFormProps) {\n      super(props);\n      this.state = { taskQueue: new TaskQueue(10), description: '' }\n  }\n\n  pushTask() {\n    this.setState({\n      taskQueue: this.state.taskQueue.push(\n          new Task(this.state.description)\n      ),\n      description: ''\n    });\n  }\n\n  popTask() {\n    this.setState({\n      taskQueue: this.state.taskQueue.pop()\n    })\n  }\n\n  onChange(event: ChangeEvent<HTMLTextAreaElement>): void {\n    this.setState({\n      description: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"inline-block box-border w-full h-19\">\n          <textarea\n            className=\"inline-block box-border w-full h-full outline-none p-1 text-lg resize-none text-gray-600\"\n            placeholder=\"Write task\"\n            value={ this.state.description }\n            onChange={ (e) => this.onChange(e) }>\n          </textarea>\n        </div>\n        <div className=\"inline-block box-border w-full border-b-2 border-gray-400\">\n          <button\n            className=\"bg-red-400 hover:bg-red-500 px-6 py-1 text-white float-right rounded mb-1 mr-1\"\n            onClick={() => { this.popTask() }}>Pop</button>\n          <button\n            className=\"bg-green-400 hover:bg-green-500 px-6 py-1 text-white float-right rounded mb-1 mr-1\"\n            onClick={() => { this.pushTask()} }>Push</button>\n        </div>\n        <TaskList\n          task_queue={ this.state.taskQueue }\n        />\n      </div>\n    );\n  }\n}\n\nexport default TaskForm\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './css/output.css'\n\nimport TaskForm from './ts/apps/task_form'\n\nconst style = {\n  height: \"calc(100vh - 2.5rem)\"\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <body className=\"m-0\">\n      <header className=\"border-b-2 border-gray-400 h-10\">\n        <h1 className=\"text-center text-gray-600 text-xl py-1\">Task Queue</h1>\n      </header>\n      <div className=\"container mx-auto md:w-1/2 border-r border-l border-gray-400 mr-1/2\" style={style}>\n        <TaskForm/>\n      </div>\n    </body>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}